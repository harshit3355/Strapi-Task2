# This is a basic workflow to help you get started with Actions

name: Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Generate Environment File
        run: |
          echo "PORT=1337" >> .env
          echo "HOST=0.0.0.0" >> .env
          echo "APP_KEYS=${{secrets.APP_KEYS}}" >> .env
          echo "API_TOKEN_SALT=${{secrets.API_TOKEN_SALT}}" >> .env
          echo "ADMIN_JWT_SECRET=${{secrets.ADMIN_JWT_SECRET}}" >> .env
          echo "TRANSFER_TOKEN_SALT=${{secrets.TRANSFER_TOKEN_SALT}}" >> .env
          echo "DATABASE_CLIENT=${{secrets.DATABASE_CLIENT}}" >> .env
          echo "DATABASE_FILENAME={{secrets.DATABASE_FILENAME}}" >> .env
          echo "JWT_SECRET={{secrets.JWT_SECRET}}" >> .env
          

      # Runs a set of commands using the runners shell
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          echo "${EC2_KEY}" > private_key.pem
          chmod 600 private_key.pem
          
          echo "Testing SSH connection..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "echo 'SSH connection successful.'"
          scp -o StrictHostKeyChecking=no .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/TEMP/.env
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" --exclude="node_modules" ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/TEMP
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            cd /home/${{secrets.EC2_USER}}//TEMP
            npm install 
            pm2 restart ecosystem.config.js --env production
          EOF
